//Logs controls.
var DEBUG   = true;
var INFO    = true;
var ERROR   = true;
var ALL     = false;

//Arguments
var multipleImages = false;

//Arguments validation
if(process.argv[2] && process.argv[2].indexOf("multiple-images=")+1){
  multipleImages = process.argv[2].split("=")[1]=="true";
  ( ALL || DEBUG ) && console.info("Arg 2: ",multipleImages);
}

//Node S.O. libs
var fs = require('fs');
var path = require('path');

//Non S.O. libs
var nodeSpotifyWebHelper = require('node-spotify-webhelper');
var request = require('request');

//Generated by NodeRT
var profile = require('windows.system.userprofile');
var storage = require('windows.storage');

var spotify = new nodeSpotifyWebHelper.SpotifyWebHelper();



var lockScreenImageDir = path.join(__dirname, 'lockscreen_img');

// make sure the directory in which we save the images exist
if (!fs.existsSync(lockScreenImageDir)) {
  fs.mkdirSync(lockScreenImageDir);
}

var imageLocation = path.join(lockScreenImageDir, 'image.png');
var defaultImage = path.join(lockScreenImageDir, 'default.png');
var spotifyImage = path.join(lockScreenImageDir, 'spotify.png');
var pausedImage = path.join(lockScreenImageDir, 'paused.png');

/**
 * Download the file and saves it.
 * @param {String} uri - Url.
 * @param {String} filename - path with filename at end. (Eg: path/file.png).
 * @param {Function} [callback] - callback for close and error.*/
var download = function download(uri, filename, callback) {
  callback = callback || function () {};
  var st = request(uri).pipe(fs.createWriteStream(filename));
  st.on('close', callback);
  st.on('error', callback);
};

/**
 * Sets the windows lockscreen to the current image path, using NodeRT modules
 * @param {String} path - path from which image will be retrieved.
 * @param {Function} [cb] - callback for error or success.
 */
var setLockScreen = function setLockScreen(path, cb) {
  cb = cb || function() {};
  storage.StorageFile.getFileFromPathAsync(path, function(err, file) {
    if (err) {
      ( ALL || ERROR )  && console.error('Error getting image file:', err);
      cb(err);
    }

    profile.LockScreen.setImageFileAsync(file, function(err) {
      if (err) {
        ( ALL || ERROR )  && console.error('Error setting lock screen image:', err);
        return cb(err);
      }
      cb();
    });
  });
};

// holds the artistName of the track that is currently playing
var currentArtistName;

// 1. Get the currently playing track information using SpotifyWebHelper
// 2. Check if track.artist_resource.name is different from the value in currentArtistName - if not return
// 3. If it's a new artist:
//    3.1
var setLockScreenIfArtistChanged = function setLockScreenIfArtistChanged(cb) {

  spotify = new nodeSpotifyWebHelper.SpotifyWebHelper();

  cb = cb || function() {};


  spotify.getStatus(function (err, res) {

    if (err) {
      ( ALL || INFO )  && console.info("Error, skipping");
      return cb();
    }

    if (!res || !res.track) {

      if (currentArtistName != "none") {
        ( ALL || INFO )  && console.info('No data, setting default');
        currentArtistName = "none";
        setLockScreen(defaultImage, cb);
      }
    }

    else {

      if (res.playing) {

        if (currentArtistName === res.track.artist_resource.name) {
          return cb(null, false);
        }

        currentArtistName = res.track.artist_resource.name;


        var url = "https://api.spotify.com/v1/artists/";

        if (res.track.artist_resource.uri) {
          url = url + res.track.artist_resource.uri.split(':')[2];
        }

        request(url, function (err, res, body) {

          if (err) {
            ( ALL || INFO )  && console.info('Error');
            return cb();
          }

          if (!body) {
            ( ALL || INFO )  && console.info('No image data, setting default');

            setLockScreen(spotifyImage, cb);

          }

          var obj = JSON.parse(body);

          if (!obj.images) {

            ( ALL || INFO )  && console.info('No image data, setting default');

            setLockScreen(spotifyImage, cb);
          }

          else {

            try {

              var imageUrl = obj.images[0].url;

              //Set image to the current artist if multiple images are allowed
              if(multipleImages) {
                imageLocation = path.join(lockScreenImageDir, currentArtistName+'.png');
              }

              //If image not exists or multiple images are not allowed, download it
              if (!fs.existsSync(imageLocation) || !multipleImages) {
                ( ALL || INFO ) && multipleImages && console.info("Artist image not found, downloading it");
                download(imageUrl, imageLocation, function (err) {

                  if (err) {
                    ( ALL || INFO ) && console.info('error, skipping');
                    return cb();
                  }

                  ( ALL || INFO ) && console.info('Setting lockscreen: ' + currentArtistName);
                  setLockScreen(imageLocation, cb);

                });
              } else {
                ( ALL || INFO ) && console.info('Setting lockscreen: ' + currentArtistName);
                setLockScreen(imageLocation, cb);
              }
            }

            catch (err) {
              ( ALL || INFO ) && console.info('No image data, setting default');
              setLockScreen(spotifyImage, cb);

            }

          }

        });
      }

      else {
        if (currentArtistName != "paused") {
          ( ALL || INFO )  && console.info('Spotify is paused, setting default');
          currentArtistName = "paused";

          setLockScreen(pausedImage, cb);
        }

      }

    }

  });

};

setInterval(function () {
  setLockScreenIfArtistChanged();
}, 5000);
